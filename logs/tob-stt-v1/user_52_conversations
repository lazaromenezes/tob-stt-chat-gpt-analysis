Seeker: TOB_STT iniciar conversa
TOB-STT: Hi there! What's your name?
Seeker: TOB_STT iniciar conversa
TOB-STT: Hi there! What's your name?
Seeker: Hello
TOB-STT: Hi there!
Seeker: What is functional testing?
TOB-STT: Functional testing (or Black Box Testing) is a technique whereby the system is tested against the functional requirements/specifications. During the functional testing the internal logic of the system being tested is not known to the tester. Functional testing ensures that the requirements are properly satisfied by the system. This type of testing is not concerned with how processing occurs, but rather, with the results of processing. It simulates actual system usage but does not make any system structure assumptions. Functional testing is normally performed during the levels of System Testing and Acceptance Testing.
Seeker: What are the functional testing criterias?
TOB-STT: Are you testing me?
Seeker: No
TOB-STT: Come on.
Seeker: What are them?
TOB-STT: I would look into the web for that knowledge.
Seeker: Why if I have you?
TOB-STT: I don't know how to respond this
Seeker: Ok
TOB-STT: Gee.
Seeker: What is limit value analysis?
TOB-STT: Check back later and see if I learn the answer to that one.
Seeker: How to use the functional testing criterias?
TOB-STT: I don't know how to respond this
Seeker: What is a Boundary value analysis?
TOB-STT: Boundary_value_analysis is a functional testing criterion which test data are chosen on or near the boundaries of the input domain of variables, with the underlying rationale that many faults tend to concentrate near the extreme values of inputs. An extension of this technique is robustness testing, wherein test cases are also chosen outside the input domain of variables to test program robustness in processing unexpected or erroneous inputs.
Seeker: How to use Boundary value analysis?
TOB-STT: The boundary-value testing criterion determines the boundaries for input values and selects the extremes of the boundary to generate test cases. For instance, if a program's valid input is a positive number less than 10, then the following test cases will be selected in order to test the boundaries: 0, 1, -1, 10, 9 and 11.
Seeker: Another example of Boundary value analysis?
TOB-STT: Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13.
Seeker: another example of Boundary value analysis?
TOB-STT: Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18
Seeker: another example of Boundary value analysis
TOB-STT: Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13.
Seeker: another example of Boundary value analysis?
TOB-STT: Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18
Seeker: give me an example of partitioning
TOB-STT: I don't know how to respond this
Seeker: give me an example of equivalence class partitioning
TOB-STT: I don't know how to respond this
Seeker: How to use equivalence class partitioning
TOB-STT: The equivalence partitioning criterion divides the input domain in several subsets (partitions) with no intersection and selects a test case for each partition. The idea is that each test case represents all input domain that partition class and, therefore, one test case for each class is enough for this testing criterion. The criterion considers valid and invalid equivalence classes. For example, you can separate invalid and valid inputs into two different subsets or classes.
Seeker: another example of equivalence class partitioning?
TOB-STT: Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20.
Seeker: another example of equivalence class partitioning
TOB-STT: Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20.
Seeker: What is a mistake
TOB-STT: A mistake is a human action that inserts a fault (or defect) into the source code, for instance, a typo is a mistake.
Seeker: What is a fault
TOB-STT: Fault is an incorrect step, process, or data definition in computer program. Fault is the formal name of a bug.
Seeker: What is a failure
TOB-STT: A failure is a result of the program which is incorrect or not expected. This is caused by an error.
Seeker: What is an error
TOB-STT: An error is a state of execution of the program which is not expected and may lead to an incorrect result.
Seeker: What is the difference among them?
TOB-STT: You tell me.
Seeker: What is the difference between fault and failure
TOB-STT: A fault (or defect) is an incorrect step, process, or data definition in computer program. A fault can lead the program or software to a failure, i.e an incorrect result. Therefore, a failure is an incorrect or not expected result of the program execution.
Seeker: Give an example of a mistake
TOB-STT: I don't know how to respond this
Seeker: an example of a mistake
TOB-STT: I don't know how to respond this
Seeker: another example of a mistake
TOB-STT: I don't know how to respond this
Seeker: another example of a fault
TOB-STT: I don't know how to respond this
Seeker: another example of a failure
TOB-STT: I don't know how to respond this
Seeker: What is a test case
TOB-STT: A test case is composed by the test input, the execution conditions and the expected output to be produced by the program.
Seeker: What is a data test
TOB-STT: Have you tried a web search?
Seeker: No because I have you.
TOB-STT: Perhaps you should try.. I don't know how to respond this. I haven't heard anything like that before.
Seeker: what is a class under test?
TOB-STT: Would you like to know more?
Seeker: yes
TOB-STT: What would you like to know?
Seeker: what does a class under test mean?
TOB-STT: I can't give you that information.
